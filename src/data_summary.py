"""
Script utilitaire pour afficher un r√©sum√© complet de l'√©tat des donn√©es du projet Valorant.
"""

from database_utils import DatabaseManager
from config import MATCHS_FILE, DATA_FILE
from rich.console import Console
from rich.table import Table
import pandas as pd
from pathlib import Path

console = Console()

def check_database_status():
    """V√©rifie l'√©tat de la base de donn√©es des joueurs."""
    db_manager = DatabaseManager()
    
    if db_manager.database_exists():
        count = db_manager.get_player_count()
        status = f"[green]‚úì {count} joueurs[/green]"
    else:
        status = "[red]‚úó Vide ou inexistante[/red]"
    
    return status, db_manager.get_player_count() if db_manager.database_exists() else 0

def check_csv_file(file_path: Path, description: str):
    """V√©rifie l'√©tat d'un fichier CSV."""
    if file_path.exists():
        try:
            df = pd.read_csv(file_path)
            count = len(df)
            size_mb = file_path.stat().st_size / (1024 * 1024)
            status = f"[green]‚úì {count} entr√©es ({size_mb:.1f} MB)[/green]"
            return status, count
        except Exception as e:
            status = f"[red]‚úó Erreur: {str(e)[:30]}...[/red]"
            return status, 0
    else:
        status = "[yellow]‚ö† Fichier inexistant[/yellow]"
        return status, 0

def display_data_summary():
    """Affiche un r√©sum√© complet des donn√©es."""
    console.print("[bold blue]üéÆ R√©sum√© des donn√©es Valorant[/bold blue]\n")
    
    # Cr√©er un tableau pour l'affichage
    table = Table(title="√âtat des fichiers de donn√©es")
    table.add_column("Type", style="cyan", no_wrap=True)
    table.add_column("Localisation", style="magenta")
    table.add_column("√âtat", style="white")
    table.add_column("Nombre d'entr√©es", justify="right", style="green")
    
    # V√©rifier la base de donn√©es des joueurs
    db_status, db_count = check_database_status()
    table.add_row("üóÉÔ∏è Joueurs (BDD)", str(DATA_FILE / "player_stats.db"), db_status, str(db_count))
    
    # V√©rifier le fichier CSV des matchs
    if MATCHS_FILE.exists():
        matchs_status, matchs_count = check_csv_file(MATCHS_FILE, "Matchs")
    else:
        matchs_status, matchs_count = "[yellow]‚ö† Fichier inexistant[/yellow]", 0
    table.add_row("üéÆ Matchs (CSV)", str(MATCHS_FILE), matchs_status, str(matchs_count))
    
    # Afficher le tableau
    console.print(table)
    
    # Afficher des recommandations
    console.print("\n[bold yellow]üí° Recommandations:[/bold yellow]")
    
    if db_count == 0:
        console.print("  ‚Ä¢ [red]Aucun joueur dans la base de donn√©es[/red]")
    
    if matchs_count == 0:
        console.print("  ‚Ä¢ [yellow]Aucun match collect√©[/yellow]")
        console.print("    ‚Üí Ex√©cutez: [cyan]python matchs_collect.py[/cyan]")
    
    
    # Afficher quelques statistiques suppl√©mentaires
    console.print(f"\n[bold green]üìà R√©sum√© num√©rique:[/bold green]")
    console.print(f"  ‚Ä¢ Joueurs dans la base de donn√©es: [green]{db_count}[/green]")
    console.print(f"  ‚Ä¢ Matchs collect√©s: [green]{matchs_count}[/green]")
    
    if db_count > 0 and matchs_count > 0:
        ratio = matchs_count / db_count
        console.print(f"  ‚Ä¢ Ratio matchs/joueur: [cyan]{ratio:.1f}[/cyan]")
    
    # V√©rifier l'espace disque utilis√©
    total_size = 0
    for file_path in [MATCHS_FILE, DATA_FILE / "player_stats.db"]:
        if file_path.exists():
            total_size += file_path.stat().st_size
    
    size_mb = total_size / (1024 * 1024)
    console.print(f"  ‚Ä¢ Espace total utilis√©: [blue]{size_mb:.1f} MB[/blue]")

def show_recent_activity():
    """Affiche l'activit√© r√©cente des fichiers."""
    console.print(f"\n[bold cyan]üïí Activit√© r√©cente:[/bold cyan]")
    
    files_to_check = [
        (DATA_FILE / "player_stats.db", "Base de donn√©es"),
        (MATCHS_FILE, "Fichier des matchs"),
    ]
    
    for file_path, description in files_to_check:
        if file_path.exists():
            mtime = file_path.stat().st_mtime
            import datetime
            last_modified = datetime.datetime.fromtimestamp(mtime)
            time_diff = datetime.datetime.now() - last_modified
            
            if time_diff.days == 0:
                time_str = f"{time_diff.seconds // 3600}h {(time_diff.seconds % 3600) // 60}m"
            else:
                time_str = f"{time_diff.days}j"
            
            console.print(f"  ‚Ä¢ {description}: [yellow]modifi√© il y a {time_str}[/yellow]")

def main():
    display_data_summary()
    show_recent_activity()
    
    console.print(f"\n[bold blue]üîß Commandes utiles:[/bold blue]")
    console.print("  ‚Ä¢ [cyan]python db_manager.py --info[/cyan]          ‚Üí D√©tails de la BDD")
    console.print("  ‚Ä¢ [cyan]python player_stats_collector.py[/cyan]     ‚Üí Collecter des stats")
    console.print("  ‚Ä¢ [cyan]python matchs_collect.py[/cyan]             ‚Üí Collecter des matchs")
    console.print("  ‚Ä¢ [cyan]python data_summary.py[/cyan]               ‚Üí Ce r√©sum√©")

if __name__ == "__main__":
    main()
